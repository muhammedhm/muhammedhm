#include <stdio.h>
#include <string.h>

// Q-1
// void swap(int *a,int *b){
//     int tmp = *a;
//     *a=*b;
//     *b=tmp;
// }

// void main(){
//     int a;
//     printf("Enter  value for a: ");
//     scanf("%d\n",&a);
//     int b;
//      printf("Enter  value for b: ");
//     scanf("%d\n",&b);
//     printf("before swapping a=%d,b=%d",a,b);
//     swap(&a,&b);
//     printf("a=%d,b=%d",a,b);
// }

//Q-2
// void main(){
//     char string1[]="Computer systems Engineering";
//     for(int i =strlen(string1);i>=0;i--){
//         printf("%c",*(string1+i));
//     }
// }

//Q-3

// int main() {
//     int size;

//     // Input the size of the array
//     printf("Enter the size of the array: ");
//     scanf("%d", &size);

//     // Declare an array of the given size
//     int arr[size];

//     // Input array elements using pointers
//     printf("Enter %d elements:\n", size);
//     for (int i = 0; i < size; ++i) {
//         printf("Enter element %d: ", i + 1);
//         scanf("%d", &(*(arr + i)));  // Using pointer notation to access array elements
//     }

//     // Print array elements using pointers
//     printf("\nArray elements are:\n");
//     for (int i = 0; i < size; ++i) {
//         printf("%d ", *(arr + i));  // Using pointer notation to access array elements
//     }

//     return 0;
// }

//Q-4

// int main() {
//     int array1[]={1,2,3,4,5,6,7
//     };
//     int search;
//     printf("Enter number to be searched\n: ");
//     scanf("%d",&search);
//     for(int i = 0;i<7;i++){
//         if(search==*(array1+i)){
//             printf("%d",search);
//             printf(" Found in array1 ");
//             return 0;
//         }
//     }
    

//     return 0;
// }

//Q-5
//// Function to add two matrices using pointers
// void addMatrices(int *mat1, int *mat2, int *result, int rows, int cols) {
//     for (int i = 0; i < rows; ++i) {
//         for (int j = 0; j < cols; ++j) {
//             // Accessing elements using pointer notation
//             *(result + i * cols + j) = *(mat1 + i * cols + j) + *(mat2 + i * cols + j);
//         }
//     }
// }

// // Function to display a matrix
// void displayMatrix(int *matrix, int rows, int cols) {
//     for (int i = 0; i < rows; ++i) {
//         for (int j = 0; j < cols; ++j) {
//             // Accessing elements using pointer notation
//             printf("%d\t", *(matrix + i * cols + j));
//         }
//         printf("\n");
//     }
// }

// int main() {
//     int rows, cols;

//     // Input the number of rows and columns for the matrices
//     printf("Enter the number of rows: ");
//     scanf("%d", &rows);

//     printf("Enter the number of columns: ");
//     scanf("%d", &cols);

//     // Declare matrices of the given size
//     int mat1[rows][cols], mat2[rows][cols], result[rows][cols];

//     // Input elements for the first matrix
//     printf("Enter elements for the first matrix:\n");
//     for (int i = 0; i < rows; ++i) {
//         for (int j = 0; j < cols; ++j) {
//             printf("Enter element (%d, %d): ", i + 1, j + 1);
//             scanf("%d", &mat1[i][j]);
//         }
//     }

//     // Input elements for the second matrix
//     printf("\nEnter elements for the second matrix:\n");
//     for (int i = 0; i < rows; ++i) {
//         for (int j = 0; j < cols; ++j) {
//             printf("Enter element (%d, %d): ", i + 1, j + 1);
//             scanf("%d", &mat2[i][j]);
//         }
//     }

//     // Add matrices using the addMatrices function
//     addMatrices(&mat1[0][0], &mat2[0][0], &result[0][0], rows, cols);

//     // Display the result matrix
//     printf("\nResultant Matrix (Sum of Matrices):\n");
//     displayMatrix(&result[0][0], rows, cols);

//     return 0;
// }

